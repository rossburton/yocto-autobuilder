'''
Created on Dec 4, 2012

__author__ = "Elizabeth 'pidge' Flanagan"
__copyright__ = "Copyright 2013, Intel Corp."
__credits__ = ["Elizabeth Flanagan"]
__license__ = "GPL"
__version__ = "2.0"
__maintainer__ = "Elizabeth Flanagan"
__email__ = "elizabeth.flanagan@intel.com"
'''
#!/usr/bin/python
from twisted.python import log
from config import *
from buildbot.schedulers.forcesched import *
from buildbot.schedulers.triggerable import Triggerable
from buildbot.schedulers import timed
from buildbot.schedulers.basic  import SingleBranchScheduler
from buildbot.changes import filter
from buildbot.changes.pb import PBChangeSource

class Autobuilder:
    def __init__(self, cfile=None):
        self.yocto_sources = YOCTO_SOURCES
        self.yocto_sched = YOCTO_SCHED
        self.yocto_builders = YOCTO_BUILDERS
        self.yocto_projname = YOCTO_PROJNAME
        self.yocto_projurl = YOCTO_PROJURL
        self.config = None
        import os, config
        if cfile is None:
            try:
                self.cfile = os.environ.get("YOCTO_AB_CONFIG")
            except:
                self.cfile = "./buildset-config/yoctoAB.conf"

    # Create extra schedulers requested for the given buildset using 'scheduler:'
    def createExtraSchedulers(self, key, checkoutprops):
        import ast
        schedulerkey = 'scheduler'
        if self.configdict[key].has_key(schedulerkey):
            for scheds in ast.literal_eval(self.configdict[key][schedulerkey]):
                for name,value in dict(scheds).iteritems():
                    schedtype = None
                    if value.has_key('type'):
                        schedtype = value['type']

                    # For each change based scheduler, create separate change source
                    # for each repo in the build set; this is so that each repo can have
                    # distinct authorisation credential, etc.
                    if schedtype == "SingleBranchScheduler":
                        if not value.has_key('repository'):
                            log.msg("%s has no repository property" % schedtype)
                            continue

                        reponame = value['repository']
                        repos = dict(ast.literal_eval(self.configdict[key]['repos'])[0])
                        if not repos.has_key(reponame):
                            log.msg("No repo %s found" % reponame)
                            continue

                        repo=repos[reponame]
                        if not repo.has_key('repourl'):
                            log.msg("No repourl for %s found" % reponame)
                            continue

                        # default user to the name of the repo
                        user=str(reponame)
                        if value.has_key('change-user'):
                            user=value['change-user']

                        # default password is None, which in the change source becomes 'changepw'
                        passwd=None
                        if value.has_key('change-password'):
                            passwd=value['change-password']

                        self.yocto_sources.append(PBChangeSource(user=user, passwd=passwd))

                        branch="master"
                        stabletimer=60
                        if repo.has_key('branch'):
                            branch = repo['branch']
                        if value.has_key('stable-timer'):
                            stabletimer = value['stable-timer']
                        self.yocto_sched.append(SingleBranchScheduler(name=str(name),
                                                                      builderNames=['%s' % key],
                                                                      change_filter=filter.ChangeFilter(branch=branch,
                                                                                                        repository=repo['repourl']),
                                                                      treeStableTimer=stabletimer))
                        log.msg("Added %s '%s' for branch '%s' in repository '%s'" % (schedtype,str(name),branch,repo['repourl']))

                    elif not schedtype or schedtype == "Nightly":
                        # Set default values for optional nightly build
                        # parameters.
                        buildmonth="*"
                        builddayOfWeek = "*"
                        if value.has_key('month'):
                            buildmonth = value['month']
                        if value.has_key('dayOfWeek'):
                            builddayOfWeek = value['dayOfWeek']
                        self.yocto_sched.append(timed.Nightly(name=str(name),
                                                              branch='default',
                                                              builderNames=['%s' % key],
                                                              properties=checkoutprops,
                                                              hour=value['hour'],
                                                              minute=value['minute'],
                                                              month=buildmonth,
                                                              dayOfWeek=builddayOfWeek))


    def createBuildsets(self):
        import BuildSet
        import ast
        beenHere=[]
        sort = True
        if self.config.has_option('BuildSets', 'order'):
            sort = False
            for set in ast.literal_eval(self.config.get('BuildSets', 'order')):
                beenHere.append(set)
        for key in self.configdict:
            if key not in beenHere and key != "BuildSets":
                beenHere.append(key)
        if sort:
            beenHere.sort()
        # REALLY crappy way to do this, but better than setting globals. 
        os.environ["YOCTO_SORTED_BUILDERS"]= str(beenHere)
        for key in beenHere:
            builders=ast.literal_eval(self.configdict[key]['builders']), 
            if key is not "BuildSets":
                schedprops = []
                checkoutprops={}
                set_props = {}
                schedprops.append(NestedParameter(name='ss_' + key, label="<h3><div class='trigger_heading' id='"+key+"'>" + key + " defaults:</div></h3>", fields=[FixedParameter(name="dummy", default="dummy")]))
                if self.configdict[key].has_key('props'):
                    for props in ast.literal_eval(self.configdict[key]['props']):
                        for prop in dict(props):
                            self.prop_name=""
                            self.prop_prop_type=""
                            self.prop_default="" 
                            self.prop_choices="" 
                            self.prop_label=""
                            self.prop_required=""
                            self.prop_size=""
                            setattr(self, "prop_name", prop)
                            for k, v in props[prop].iteritems():
                                setattr(self, "prop_"+str(k), v)
                            schedpropstoextend = self.CreateExtraSchedulerParams(name=self.prop_name, 
                                                                                 prop_type=self.prop_prop_type,
                                                                                 default=self.prop_default, 
                                                                                 choices=self.prop_choices, 
                                                                                 label=self.prop_label, 
                                                                                 required=self.prop_required, 
                                                                                 scheduler=key,
                                                                                 size=self.prop_size)
                            schedprops.extend(schedpropstoextend)
                for layer in ast.literal_eval(self.configdict[key]['repos']):
                    schedpropstoextend, newcheckoutprops = self.CreateLayerSchedulerParams(layer=layer, trigger=key, triggerer=True)
                    schedprops.extend(schedpropstoextend)
                    checkoutprops.update(newcheckoutprops)
                for step in ast.literal_eval(self.configdict[key]['steps']):
                    if step.has_key('TriggerBuilds'):
                        layername=layer.iterkeys().next()
                        schedprops.append(NestedParameter(name='blank_triggered_builds', 
                                                          label="<h3> Layers within triggered builds. These will not inherit the main repo/branch.<hr></h3>",
                                                          fields=[FixedParameter(name="dummy", default="dummy")]))
                        for scheduler in step['TriggerBuilds']['schedulerNames'].iterkeys():
                            
                            schedprops.append(NestedParameter(name='ss_' + scheduler, label="<h3><div class='trigger_heading' id='"+scheduler+"'>" + key + " " + scheduler + " defaults:</div></h3>", fields=[FixedParameter(name="dummy", default="dummy")]))
                            for triggered_layer in ast.literal_eval(self.configdict[scheduler]['repos']):
                                schedpropstoextend, newcheckoutprops = self.CreateLayerSchedulerParams(layer=triggered_layer, trigger=scheduler, triggerer=False)
                                schedprops.extend(schedpropstoextend)
                                checkoutprops.update(newcheckoutprops)
                            if self.configdict[scheduler].has_key('props'):
                                for sched_props in ast.literal_eval(self.configdict[scheduler]['props']):
                                    for prop in dict(sched_props):
                                        self.prop_name=""
                                        self.prop_prop_type=""
                                        self.prop_default="" 
                                        self.prop_choices="" 
                                        self.prop_label=""
                                        self.prop_required=""
                                        self.prop_size=""
                                        setattr(self, "prop_name", prop)
                                        for k, v in sched_props[prop].iteritems():
                                            setattr(self, "prop_"+str(k), v)
                                        schedpropstoextend = self.CreateExtraSchedulerParams(name=self.prop_name, 
                                                                                             prop_type=self.prop_prop_type,
                                                                                             default=self.prop_default, 
                                                                                             choices=self.prop_choices, 
                                                                                             label=self.prop_label, 
                                                                                             required=self.prop_required, 
                                                                                             size=self.prop_size,
                                                                                             scheduler=scheduler)
                                        schedprops.extend(schedpropstoextend)
                            buildername=[]
                            buildername.append(scheduler)
                            self.yocto_sched.append(Triggerable(name="trigger_" + scheduler, builderNames=buildername))
                set_props.update(checkoutprops)
                locals()['buildset_%s' % key]=BuildSet.BuildSet(name=key,
                                                                steps=ast.literal_eval(self.configdict[key]['steps']), 
                                                                builders=ast.literal_eval(self.configdict[key]['builders']),
                                                                layers=ast.literal_eval(self.configdict[key]['repos']),
                                                                set_props=set_props)
                self.yocto_sched.append(ForceScheduler(
                                    name=str(key),
                                    branch=FixedParameter(name="branch", 
                                                          default=""),
                                    reason=StringParameter(name="reason",
                                                           label="Reason:<br>",
                                                           required=False, 
                                                           size=120),
                                    revision=FixedParameter(name="revision", 
                                                            default=""),
                                    repository=FixedParameter(name="repository",
                                                              default=""),
                                    project=FixedParameter(name="repository",
                                                           default=""),
                                    builderNames=['%s' % key],
                                    properties=schedprops))

                self.createExtraSchedulers(key=key, checkoutprops=checkoutprops)


    def parseConfig(self):
        import ConfigParser
        from os import listdir
        from os.path import dirname, isfile, join
        print "LOADING CONFIG FILE"
        self.config = ConfigParser.ConfigParser()
        self.configdir=os.path.dirname(self.cfile)
        self.configfiles = [ join(self.configdir,f) for f in listdir(self.configdir) if isfile(join(self.configdir,f)) and (f != 'autobuilder.conf') ]
        try:
            self.config.read(self.configfiles)
        except:
            print "Can't seem to find the Config file. Is YOCTO_AB_CONFIG set?"
        self.buildsets=self.config.sections()
        self.configdict = {}
        for section in self.buildsets:
            self.configdict[section]= dict(self.config.items(section))
        return self.configdict

    def GetLayerCommitId(self, layer):
            if 'hash' in layer[layer.iterkeys().next()] :
                layercommitid=layer[layer.iterkeys().next()]['hash']
            elif 'tag' in layer[layer.iterkeys().next()]:
                layercommitid=layer[layer.iterkeys().next()]['tag']
            else:
                layercommitid="HEAD"
            return layercommitid

    def GetLayerBranch(self, layer):
            if 'branch' in layer[layer.iterkeys().next()]:
                layerbranch=layer[layer.iterkeys().next()]['branch']
            else:
                layerbranch="master"
            return layerbranch

    def capitalize(self, word):
        return ' '.join([s[0].upper() + s[1:] for s in word.split(' ')])

    def CreateExtraSchedulerParams(self, name=None, 
                                         prop_type=None, 
                                         default=None, 
                                         choices=None, 
                                         label=None, 
                                         required=None, 
                                         size=None,
                                         scheduler=""):
        self.supported_prop_types  = ["ChoiceStringParameter", 
                         "StringParameter",
                         "FixedParameter",
                         "BooleanParameter"]
        self.schedprops = []
        self.prop_type=prop_type
        self.name=name
        self.choices=choices
        self.prop_type=prop_type
        self.label=label
        self.required=required
        self.size=size
        self.default=default
        self.scheduler=scheduler
        self.id="custom_"+self.name+"_"+self.scheduler
        if self.label is None:
            self.label=self.name

        if self.default is None:
            if prop_type == "FixedParameter":
                try:
                    raise ABConfigError("your config file has a fixed type property declaration that has no default")
                except ABConfigError, (instance):
                    log.msg("Caught: " + instance.parameter)
            else:
                self.default = ""

        if self.prop_type == "ChoiceStringParameter":
            if self.choices is None: 
                try:
                    raise ABConfigError("your config file has a ChoiceStringParameter declaration that has no choices")
                except ABConfigError, (instance):
                    log.msg("Caught: " + instance.parameter)

        if self.required is None:
            self.required=True

        if self.size is None:
            self.size=80

        if self.prop_type is None:
            self.prop_type = "StringParameter"

        if self.prop_type=="ChoiceStringParameter":
           self.schedprops.append(ChoiceStringParameter(name=self.id, 
                                             label=self.label, 
                                             required=self.required, 
                                             default=str(self.default),
                                             choices=self.choices))
        elif self.prop_type=="StringParameter":
           self.schedprops.append(StringParameter(name=self.id, 
                                             label=self.label, 
                                             required=self.required, 
                                             default=self.default,
                                             size=self.size))
        elif self.prop_type=="FixedParameter":
           self.schedprops.append(FixedParameter(name=self.id, 
                                             label=self.label, 
                                             required=self.required, 
                                             default=self.default))
        elif self.prop_type=="BooleanParameter":
           self.schedprops.append(ChoiceStringParameter(name=self.id, 
                                             label=self.label, 
                                             required=True, 
                                             default=str(self.default),
                                             choices=['True', 'False']))
        else:
            try:
                raise ABConfigError("your config file has a prop declaration that is not valid")
            except ABConfigError, (instance):
                log.msg("Caught: " + instance.parameter)
        return self.schedprops

    def CreateLayerSchedulerParams(self, layer=None, trigger=None, triggerer=None):
            schedprops = []
            set_checkoutprops = {}
            layerrepo=layer[layer.iterkeys().next()]['repourl']
            layerbranch=self.GetLayerBranch(layer)
            layercommitid=self.GetLayerCommitId(layer)
            bbpriority=False
            layerpriority=2
            if 'bbpriority' in layer[layer.iterkeys().next()]:
                layerpriority=layer[layer.iterkeys().next()]['bbpriority']
                bbpriority=True
            if triggerer is True:
                layername="triggerer_" + layer.iterkeys().next() + "_" + trigger
                layerlabel=self.capitalize(trigger) + " " + self.capitalize(layer.iterkeys().next())
                set_checkoutprops['repo_' + layername] = layerrepo
                set_checkoutprops['branch_' + layername] =  layerbranch
                set_checkoutprops['bb_' + layername] =  layerpriority
            else:
                layername="trigger_" + layer.iterkeys().next() + "_" + trigger
                layerlabel=self.capitalize(trigger) + " " + self.capitalize(layer.iterkeys().next())
                set_checkoutprops['repo_' + layername] =  layerrepo
                set_checkoutprops['branch_' + layername] =  layerbranch
                set_checkoutprops['bb_' + layername] =  layerpriority
            schedprops.append(StringParameter(name="repo_"+ layername, label="Repository:<br>", required=True, default=layerrepo, size=80))
            schedprops.append(StringParameter(name="branch_" + layername, label="Branch:<br>", required=True, default=layerbranch, size=80))
            schedprops.append(StringParameter(name="commit_" + layername, label="Tag/Commit Hash:<br>", required=True, default=layercommitid, size=80))
            if bbpriority:
                schedprops.append(StringParameter(name="bb_" + layername,label="Layer Priority: ", required=False, default=layerpriority, size=2))
            else:
                schedprops.append(StringParameter(name="bb_" + layername,label="Layer Priority: ", required=False, size=2))
            return schedprops, set_checkoutprops

class ABConfigError(Exception):
       def __init__(self, value):
           self.parameter = value
       def __str__(self):
           return repr(self.parameter)

